name: Run Tests

permissions:
  contents: read

on:
  pull_request:
    branches: [ "dev220" ]
env:
  BYOND_MAJOR: "514"
  BYOND_MINOR: "1589"
  SPACEMAN_DMM_VERSION: suite-1.7.2

jobs:
  PreFlight:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Paths Filter
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: .github/workflow-config/preflight-filters.yml
    outputs:
      dm: ${{ steps.filter.outputs.dm }}
  DreamChecker:
    runs-on: ubuntu-22.04
    needs: PreFlight
    if: needs.PreFlight.outputs.dm == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Setup Cache
        uses: actions/cache@v3
        with:
          path: $HOME/spaceman_dmm/$SPACEMAN_DMM_VERSION
          key: "${{ runner.os }}-spacemandmm-${{ env.SPACEMAN_DMM_VERSION }}"
      - name: Install Dreamchecker
        run:  scripts/install-spaceman-dmm.sh dreamchecker
      - name: Run Dreamchecker
        run: ~/dreamchecker
  Code:
    runs-on: ubuntu-22.04
    needs:
    - PreFlight
    - DreamChecker
    if: needs.PreFlight.outputs.dm == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Setup Cache
        uses: actions/cache@v3
        with:
          path: $HOME/BYOND-$BYOND_MAJOR.$BYOND_MINOR
          key: ${{ runner.os }}-byond-${{ env.BYOND_MAJOR }}-${{ env.BYOND_MINOR }}
      - name: Install Dependencies
        run: sudo apt-get install -y uchardet
      - name: Run Tests
        env:
          TEST: CODE
        run: test/run-test.sh
  Maps:
    strategy:
      matrix:
        map:
          - example
          - sierra
          - away_sites_testing
    runs-on: ubuntu-22.04
    needs:
    - PreFlight
    - DreamChecker
    if: needs.PreFlight.outputs.dm == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Setup Cache
        uses: actions/cache@v3
        with:
          path: $HOME/BYOND-$BYOND_MAJOR.$BYOND_MINOR
          key: ${{ runner.os }}-byond-${{ env.BYOND_MAJOR }}-${{ env.BYOND_MINOR }}
      - name: Install rust_g
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update || true
          sudo apt remove -y libssl1.1:amd64 || true
          sudo apt install libgcc-s1:i386
          sudo apt install -o APT::Immediate-Configure=false libc6:i386
          wget http://ftp.de.debian.org/debian/pool/main/o/openssl/libssl1.1_1.1.1n-0+deb11u4_i386.deb
          sudo dpkg -i libssl1.1_1.1.1n-0+deb11u4_i386.deb
          ./scripts/download_rust_g.sh
      - name: Run Tests
        env:
          TEST: MAP
          MAP_PATH: ${{ matrix.map }}
        run: test/run-test.sh
